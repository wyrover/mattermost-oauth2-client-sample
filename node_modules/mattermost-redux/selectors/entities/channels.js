'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.canManageChannelMembers = exports.getUnreadsInCurrentTeam = exports.getUnreads = exports.getMembersInCurrentChannel = exports.getDefaultChannel = exports.getChannelsWithUnreadSection = exports.getChannelsByCategory = exports.getOtherChannels = exports.getMyChannels = exports.getGroupChannels = exports.getDirectChannels = exports.getChannelsNameMapInCurrentTeam = exports.getChannelsInCurrentTeam = exports.getChannelSetInCurrentTeam = exports.getCurrentChannelStats = exports.getMyCurrentChannelMembership = exports.getMyChannelMember = exports.getCurrentChannel = exports.getChannel = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getAllChannels = getAllChannels;
exports.getAllChannelStats = getAllChannelStats;
exports.getChannelsInTeam = getChannelsInTeam;
exports.getDirectChannelsSet = getDirectChannelsSet;
exports.getCurrentChannelId = getCurrentChannelId;
exports.getMyChannelMemberships = getMyChannelMemberships;
exports.getChannelMembersInChannels = getChannelMembersInChannels;
exports.makeGetChannel = makeGetChannel;

var _reselect = require('reselect');

var _general = require('./general');

var _preferences = require('./preferences');

var _teams = require('./teams');

var _users = require('./users');

var _channel_utils = require('../../utils/channel_utils');

var _constants = require('../../constants');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

function getAllChannels(state) {
    return state.entities.channels.channels;
}

function getAllChannelStats(state) {
    return state.entities.channels.stats;
}

function getChannelsInTeam(state) {
    return state.entities.channels.channelsInTeam;
}

function getDirectChannelsSet(state) {
    return state.entities.channels.channelsInTeam[''] || new Set();
}

function getCurrentChannelId(state) {
    return state.entities.channels.currentChannelId;
}

function getMyChannelMemberships(state) {
    return state.entities.channels.myMembers;
}

function getChannelMembersInChannels(state) {
    return state.entities.channels.membersInChannel;
}

function makeGetChannel() {
    return (0, _reselect.createSelector)(getAllChannels, function (state, props) {
        return props.id;
    }, function (state) {
        return state.entities.users;
    }, _preferences.getTeammateNameDisplaySetting, function (allChannels, channelId, users, teammateNameDisplay) {
        var channel = allChannels[channelId];
        if (channel) {
            return (0, _channel_utils.completeDirectChannelInfo)(users, teammateNameDisplay, channel);
        }
        return channel;
    });
}

var getChannel = exports.getChannel = (0, _reselect.createSelector)(getAllChannels, function (state, id) {
    return id;
}, function (state) {
    return state.entities.users;
}, _preferences.getTeammateNameDisplaySetting, function (allChannels, channelId, users, teammateNameDisplay) {
    var channel = allChannels[channelId];
    if (channel) {
        return (0, _channel_utils.completeDirectChannelInfo)(users, teammateNameDisplay, channel);
    }
    return channel;
});

var getCurrentChannel = exports.getCurrentChannel = (0, _reselect.createSelector)(getAllChannels, getCurrentChannelId, function (state) {
    return state.entities.users;
}, _preferences.getTeammateNameDisplaySetting, function (allChannels, currentChannelId, users, teammateNameDisplay) {
    var channel = allChannels[currentChannelId];
    if (channel) {
        return (0, _channel_utils.completeDirectChannelInfo)(users, teammateNameDisplay, channel);
    }
    return channel;
});

var getMyChannelMember = exports.getMyChannelMember = (0, _reselect.createSelector)(getMyChannelMemberships, function (state, channelId) {
    return channelId;
}, function (channelMemberships, channelId) {
    return channelMemberships[channelId] || {};
});

var getMyCurrentChannelMembership = exports.getMyCurrentChannelMembership = (0, _reselect.createSelector)(getCurrentChannelId, getMyChannelMemberships, function (currentChannelId, channelMemberships) {
    return channelMemberships[currentChannelId] || {};
});

var getCurrentChannelStats = exports.getCurrentChannelStats = (0, _reselect.createSelector)(getAllChannelStats, getCurrentChannelId, function (allChannelStats, currentChannelId) {
    return allChannelStats[currentChannelId];
});

var getChannelSetInCurrentTeam = exports.getChannelSetInCurrentTeam = (0, _reselect.createSelector)(_teams.getCurrentTeamId, getChannelsInTeam, function (currentTeamId, channelsInTeam) {
    return channelsInTeam[currentTeamId] || [];
});

function sortAndInjectChannels(channels, channelSet, locale) {
    var currentChannels = [];
    if (typeof channelSet === 'undefined') {
        return currentChannels;
    }

    channelSet.forEach(function (c) {
        currentChannels.push(channels[c]);
    });

    return currentChannels.sort(_channel_utils.sortChannelsByDisplayName.bind(null, locale));
}

var getChannelsInCurrentTeam = exports.getChannelsInCurrentTeam = (0, _reselect.createSelector)(getAllChannels, getChannelSetInCurrentTeam, _users.getCurrentUser, function (channels, currentTeamChannelSet, currentUser) {
    var locale = 'en';
    if (currentUser && currentUser.locale) {
        locale = currentUser.locale;
    }
    return sortAndInjectChannels(channels, currentTeamChannelSet, locale);
});

var getChannelsNameMapInCurrentTeam = exports.getChannelsNameMapInCurrentTeam = (0, _reselect.createSelector)(getAllChannels, getChannelSetInCurrentTeam, function (channels, currentTeamChannelSet) {
    var channelMap = {};
    currentTeamChannelSet.forEach(function (id) {
        var channel = channels[id];
        channelMap[channel.name] = channel;
    });
    return channelMap;
});

// Returns both DMs and GMs
var getDirectChannels = exports.getDirectChannels = (0, _reselect.createSelector)(getAllChannels, getDirectChannelsSet, function (state) {
    return state.entities.users;
}, _preferences.getTeammateNameDisplaySetting, function (channels, channelSet, users, teammateNameDisplay) {
    var dmChannels = [];
    channelSet.forEach(function (c) {
        dmChannels.push((0, _channel_utils.completeDirectChannelInfo)(users, teammateNameDisplay, channels[c]));
    });
    return dmChannels;
});

// Returns only GMs
var getGroupChannels = exports.getGroupChannels = (0, _reselect.createSelector)(getAllChannels, getDirectChannelsSet, function (state) {
    return state.entities.users;
}, _preferences.getTeammateNameDisplaySetting, function (channels, channelSet, users, teammateNameDisplay) {
    var gmChannels = [];
    channelSet.forEach(function (id) {
        var channel = channels[id];
        if (channel.type === _constants.General.GM_CHANNEL) {
            gmChannels.push((0, _channel_utils.completeDirectChannelInfo)(users, teammateNameDisplay, channel));
        }
    });
    return gmChannels;
});

var getMyChannels = exports.getMyChannels = (0, _reselect.createSelector)(getChannelsInCurrentTeam, getDirectChannels, getMyChannelMemberships, function (channels, directChannels, myMembers) {
    return [].concat(_toConsumableArray(channels), _toConsumableArray(directChannels)).filter(function (c) {
        return myMembers.hasOwnProperty(c.id);
    });
});

var getOtherChannels = exports.getOtherChannels = (0, _reselect.createSelector)(getChannelsInCurrentTeam, getMyChannelMemberships, function (channels, myMembers) {
    return channels.filter(function (c) {
        return !myMembers.hasOwnProperty(c.id) && c.type === _constants.General.OPEN_CHANNEL;
    });
});

var getChannelsByCategory = exports.getChannelsByCategory = (0, _reselect.createSelector)(getCurrentChannelId, getMyChannels, _preferences.getMyPreferences, _preferences.getTeammateNameDisplaySetting, function (state) {
    return state.entities.users;
}, function (currentChannelId, channels, myPreferences, teammateNameDisplay, usersState) {
    var allChannels = channels.map(function (c) {
        var channel = _extends({}, c);
        channel.isCurrent = c.id === currentChannelId;
        return channel;
    });

    return (0, _channel_utils.buildDisplayableChannelList)(usersState, allChannels, myPreferences, teammateNameDisplay);
});

var getChannelsWithUnreadSection = exports.getChannelsWithUnreadSection = (0, _reselect.createSelector)(getCurrentChannelId, getMyChannels, getMyChannelMemberships, _preferences.getMyPreferences, _preferences.getTeammateNameDisplaySetting, function (state) {
    return state.entities.users;
}, function (currentChannelId, channels, myMembers, myPreferences, teammateNameDisplay, usersState) {
    var allChannels = channels.map(function (c) {
        var channel = _extends({}, c);
        channel.isCurrent = c.id === currentChannelId;
        return channel;
    });

    return (0, _channel_utils.buildDisplayableChannelListWithUnreadSection)(usersState, allChannels, myMembers, myPreferences, teammateNameDisplay);
});

var getDefaultChannel = exports.getDefaultChannel = (0, _reselect.createSelector)(getAllChannels, _teams.getCurrentTeamId, function (channels, teamId) {
    return Object.values(channels).find(function (c) {
        return c.team_id === teamId && c.name === _constants.General.DEFAULT_CHANNEL;
    });
});

var getMembersInCurrentChannel = exports.getMembersInCurrentChannel = (0, _reselect.createSelector)(getCurrentChannelId, getChannelMembersInChannels, function (currentChannelId, members) {
    return members[currentChannelId];
});

var getUnreads = exports.getUnreads = (0, _reselect.createSelector)(getCurrentChannelId, getAllChannels, getMyChannelMemberships, function (currentChannelId, channels, myMembers) {
    var messageCount = 0;
    var mentionCount = 0;
    Object.keys(myMembers).forEach(function (channelId) {
        var channel = channels[channelId];
        var m = myMembers[channelId];
        if (channel && m && channel.id !== currentChannelId) {
            if (channel.type === 'D') {
                mentionCount += channel.total_msg_count - m.msg_count;
            } else if (m.mention_count > 0) {
                mentionCount += m.mention_count;
            }
            if (m.notify_props && m.notify_props.mark_unread !== 'mention' && channel.total_msg_count - m.msg_count > 0) {
                messageCount += 1;
            }
        }
    });

    return { messageCount: messageCount, mentionCount: mentionCount };
});

var getUnreadsInCurrentTeam = exports.getUnreadsInCurrentTeam = (0, _reselect.createSelector)(getCurrentChannelId, getMyChannels, getMyChannelMemberships, function (currentChannelId, channels, myMembers) {
    var messageCount = 0;
    var mentionCount = 0;

    channels.forEach(function (channel) {
        var m = myMembers[channel.id];
        if (m && channel.id !== currentChannelId) {
            if (channel.type === 'D') {
                mentionCount += channel.total_msg_count - m.msg_count;
            } else if (m.mention_count > 0) {
                mentionCount += m.mention_count;
            }
            if (m.notify_props && m.notify_props.mark_unread !== 'mention' && channel.total_msg_count - m.msg_count > 0) {
                messageCount += 1;
            }
        }
    });

    return { messageCount: messageCount, mentionCount: mentionCount };
});

var canManageChannelMembers = exports.canManageChannelMembers = (0, _reselect.createSelector)(getCurrentChannel, _users.getCurrentUser, _teams.getCurrentTeamMembership, getMyCurrentChannelMembership, _general.getConfig, _general.getLicense, _channel_utils.canManageMembers);